import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Stepper,
  Step,
  StepLabel,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Alert,
  Chip,
  Card,
  CardContent,
  Grid
} from '@mui/material';
import { AutoAwesome, Rocket, Security, SmartToy } from '@mui/icons-material';

interface OnboardingWizardProps {
  open: boolean;
  onClose: () => void;
  onComplete: (config: any) => void;
}

const steps = [
  '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
  '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏',
  '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI –ø–æ–º–æ—â–Ω–∏–∫–æ–≤',
  '–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!'
];

const taskTemplates = [
  {
    id: 'business-analysis',
    title: '–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞',
    description: '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ—Ç—á–µ—Ç–æ–≤, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
    icon: <AutoAwesome />,
    difficulty: '–õ–µ–≥–∫–æ',
    timeToSetup: '2 –º–∏–Ω—É—Ç—ã'
  },
  {
    id: 'content-creation',
    title: '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    description: '–¢–µ–∫—Å—Ç—ã, –ø–æ—Å—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç–∏, —Å—Ç–∞—Ç—å–∏',
    icon: <SmartToy />,
    difficulty: '–õ–µ–≥–∫–æ',
    timeToSetup: '1 –º–∏–Ω—É—Ç–∞'
  },
  {
    id: 'code-analysis',
    title: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    icon: <Security />,
    difficulty: '–°—Ä–µ–¥–Ω–µ',
    timeToSetup: '5 –º–∏–Ω—É—Ç'
  },
  {
    id: 'crypto-monitoring',
    title: '–ö—Ä–∏–ø—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
    description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂',
    icon: <Rocket />,
    difficulty: '–°—Ä–µ–¥–Ω–µ',
    timeToSetup: '3 –º–∏–Ω—É—Ç—ã'
  }
];

const aiProviders = [
  {
    id: 'openai',
    name: 'OpenAI (ChatGPT)',
    description: '–õ—É—á—à–∏–π –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á –∏ –∞–Ω–∞–ª–∏–∑–∞',
    free: false,
    setup: '–ù—É–∂–µ–Ω API –∫–ª—é—á (~$20/–º–µ—Å)'
  },
  {
    id: 'anthropic',
    name: 'Claude',
    description: '–û—Ç–ª–∏—á–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º',
    free: false,
    setup: '–ù—É–∂–µ–Ω API –∫–ª—é—á (~$15/–º–µ—Å)'
  },
  {
    id: 'google',
    name: 'Google Gemini',
    description: '–•–æ—Ä–æ—à –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
    free: true,
    setup: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á'
  },
  {
    id: 'ollama',
    name: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏',
    description: '–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
    free: true,
    setup: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä'
  }
];

export const OnboardingWizard: React.FC<OnboardingWizardProps> = ({
  open,
  onClose,
  onComplete
}) => {
  const [activeStep, setActiveStep] = useState(0);
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);
  const [selectedProviders, setSelectedProviders] = useState<string[]>([]);
  const [apiKeys, setApiKeys] = useState<Record<string, string>>({});
  const [userName, setUserName] = useState('');

  const handleNext = () => {
    setActiveStep((prev) => prev + 1);
  };

  const handleBack = () => {
    setActiveStep((prev) => prev - 1);
  };

  const handleTaskToggle = (taskId: string) => {
    setSelectedTasks(prev => 
      prev.includes(taskId) 
        ? prev.filter(id => id !== taskId)
        : [...prev, taskId]
    );
  };

  const handleProviderToggle = (providerId: string) => {
    setSelectedProviders(prev => 
      prev.includes(providerId) 
        ? prev.filter(id => id !== providerId)
        : [...prev, providerId]
    );
  };

  const handleComplete = () => {
    onComplete({
      userName,
      selectedTasks,
      selectedProviders,
      apiKeys
    });
    onClose();
  };

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return (
          <Box textAlign="center" py={4}>
            <Typography variant="h4" gutterBottom>
              üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FLUJO!
            </Typography>
            <Typography variant="h6" color="text.secondary" paragraph>
              –í–∞—à –ª–∏—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
            </Typography>
            <TextField
              fullWidth
              label="–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              margin="normal"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
            />
            <Alert severity="info" sx={{ mt: 2 }}>
              –ú—ã –Ω–∞—Å—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º—É –∑–∞ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç!
            </Alert>
          </Box>
        );

      case 1:
        return (
          <Box>
            <Typography variant="h5" gutterBottom>
              –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?
            </Typography>
            <Typography color="text.secondary" paragraph>
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç–µ–π. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ.
            </Typography>
            <Grid container spacing={2}>
              {taskTemplates.map((task) => (
                <Grid item xs={12} md={6} key={task.id}>
                  <Card 
                    sx={{ 
                      cursor: 'pointer',
                      border: selectedTasks.includes(task.id) ? 2 : 1,
                      borderColor: selectedTasks.includes(task.id) ? 'primary.main' : 'divider'
                    }}
                    onClick={() => handleTaskToggle(task.id)}
                  >
                    <CardContent>
                      <Box display="flex" alignItems="center" gap={2}>
                        {task.icon}
                        <Box flex={1}>
                          <Typography variant="h6">{task.title}</Typography>
                          <Typography variant="body2" color="text.secondary">
                            {task.description}
                          </Typography>
                          <Box display="flex" gap={1} mt={1}>
                            <Chip size="small" label={task.difficulty} />
                            <Chip size="small" label={task.timeToSetup} variant="outlined" />
                          </Box>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        );

      case 2:
        return (
          <Box>
            <Typography variant="h5" gutterBottom>
              –í—ã–±–µ—Ä–∏—Ç–µ AI –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
            </Typography>
            <Typography color="text.secondary" paragraph>
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å Google Gemini (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) –∏–ª–∏ OpenAI
            </Typography>
            <Grid container spacing={2}>
              {aiProviders.map((provider) => (
                <Grid item xs={12} key={provider.id}>
                  <Card 
                    sx={{ 
                      cursor: 'pointer',
                      border: selectedProviders.includes(provider.id) ? 2 : 1,
                      borderColor: selectedProviders.includes(provider.id) ? 'primary.main' : 'divider'
                    }}
                    onClick={() => handleProviderToggle(provider.id)}
                  >
                    <CardContent>
                      <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Box>
                          <Typography variant="h6">{provider.name}</Typography>
                          <Typography variant="body2" color="text.secondary">
                            {provider.description}
                          </Typography>
                          <Typography variant="caption" display="block" mt={1}>
                            {provider.setup}
                          </Typography>
                        </Box>
                        <Chip 
                          label={provider.free ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : '–ü–ª–∞—Ç–Ω–æ'} 
                          color={provider.free ? 'success' : 'warning'}
                        />
                      </Box>
                      {selectedProviders.includes(provider.id) && !provider.free && (
                        <TextField
                          fullWidth
                          size="small"
                          label="API –∫–ª—é—á"
                          value={apiKeys[provider.id] || ''}
                          onChange={(e) => setApiKeys(prev => ({
                            ...prev,
                            [provider.id]: e.target.value
                          }))}
                          margin="normal"
                          placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á"
                        />
                      )}
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        );

      case 3:
        return (
          <Box textAlign="center" py={4}>
            <Typography variant="h4" gutterBottom>
              üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ, {userName}!
            </Typography>
            <Typography variant="h6" color="text.secondary" paragraph>
              –ú—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –¥–ª—è –≤–∞—Å:
            </Typography>
            <Box my={3}>
              <Typography gutterBottom>
                üìã –ó–∞–¥–∞—á–∏: {selectedTasks.length} –≤—ã–±—Ä–∞–Ω–æ
              </Typography>
              <Typography gutterBottom>
                ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫–∏: {selectedProviders.length} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
              </Typography>
              <Typography gutterBottom>
                ‚ö° –ì–æ—Ç–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {selectedTasks.length * 2} —à–∞–±–ª–æ–Ω–æ–≤
              </Typography>
            </Box>
            <Alert severity="success">
              –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫!
            </Alert>
          </Box>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: { minHeight: '600px' }
      }}
    >
      <DialogTitle>
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FLUJO
      </DialogTitle>
      <DialogContent>
        <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
        
        {renderStepContent(activeStep)}
      </DialogContent>
      
      <DialogActions>
        <Button 
          disabled={activeStep === 0} 
          onClick={handleBack}
        >
          –ù–∞–∑–∞–¥
        </Button>
        <Box flex={1} />
        {activeStep < steps.length - 1 ? (
          <Button 
            variant="contained"
            onClick={handleNext}
            disabled={
              (activeStep === 0 && !userName) ||
              (activeStep === 1 && selectedTasks.length === 0) ||
              (activeStep === 2 && selectedProviders.length === 0)
            }
          >
            –î–∞–ª–µ–µ
          </Button>
        ) : (
          <Button 
            variant="contained"
            onClick={handleComplete}
            size="large"
          >
            –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É! üöÄ
          </Button>
        )}
      </DialogActions>
    </Dialog>
  );
};