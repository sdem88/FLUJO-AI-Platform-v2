import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Avatar,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  LinearProgress,
  IconButton,
  Alert,
  Paper,
  Divider,
  Tooltip
} from '@mui/material';
import {
  AutoAwesome,
  PlayArrow,
  History,
  TrendingUp,
  Speed,
  CheckCircle,
  Error,
  Schedule,
  Settings,
  Help,
  Add,
  Rocket
} from '@mui/icons-material';

interface DashboardStats {
  automationsRun: number;
  timeSaved: string;
  successRate: number;
  activeAutomations: number;
}

interface RecentActivity {
  id: string;
  name: string;
  status: 'success' | 'running' | 'error';
  timestamp: Date;
  duration: string;
}

interface QuickAction {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  action: () => void;
}

export const SimpleDashboard: React.FC = () => {
  const [stats, setStats] = useState<DashboardStats>({
    automationsRun: 47,
    timeSaved: '12.5 —á–∞—Å–æ–≤',
    successRate: 94,
    activeAutomations: 3
  });

  const [recentActivity] = useState<RecentActivity[]>([
    {
      id: '1',
      name: '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞',
      status: 'success',
      timestamp: new Date(Date.now() - 30 * 60 * 1000),
      duration: '2 –º–∏–Ω 15 —Å–µ–∫'
    },
    {
      id: '2',
      name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è LinkedIn',
      status: 'success',
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
      duration: '45 —Å–µ–∫'
    },
    {
      id: '3',
      name: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç',
      status: 'running',
      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),
      duration: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ...'
    },
    {
      id: '4',
      name: '–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞',
      status: 'error',
      timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),
      duration: '–û—à–∏–±–∫–∞'
    }
  ]);

  const quickActions: QuickAction[] = [
    {
      id: 'analyze-text',
      title: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç',
      description: '–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      icon: <AutoAwesome />,
      color: '#1976d2',
      action: () => console.log('Analyze text')
    },
    {
      id: 'create-content',
      title: '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç',
      description: '–ü–æ—Å—Ç—ã, —Å—Ç–∞—Ç—å–∏, –ø–∏—Å—å–º–∞',
      icon: <Add />,
      color: '#388e3c',
      action: () => console.log('Create content')
    },
    {
      id: 'monitor-prices',
      title: '–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã',
      description: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∞–∫—Ü–∏–∏, —Ç–æ–≤–∞—Ä—ã',
      icon: <TrendingUp />,
      color: '#f57c00',
      action: () => console.log('Monitor prices')
    },
    {
      id: 'browse-templates',
      title: '–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è',
      description: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤',
      icon: <Rocket />,
      color: '#7b1fa2',
      action: () => console.log('Browse templates')
    }
  ];

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success':
        return <CheckCircle color="success" />;
      case 'running':
        return <Schedule color="warning" />;
      case 'error':
        return <Error color="error" />;
      default:
        return <Schedule />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success':
        return 'success';
      case 'running':
        return 'warning';
      case 'error':
        return 'error';
      default:
        return 'default';
    }
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));

    if (diffMinutes < 60) {
      return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffHours < 24) {
      return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    } else {
      return date.toLocaleDateString('ru-RU');
    }
  };

  return (
    <Box>
      {/* Welcome Header */}
      <Box mb={4}>
        <Typography variant="h4" gutterBottom>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã
        </Typography>
        <Typography variant="h6" color="text.secondary">
          –í–∞—à–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è–º–∏
        </Typography>
      </Box>

      {/* Quick Actions */}
      <Paper elevation={2} sx={{ p: 3, mb: 4 }}>
        <Typography variant="h6" gutterBottom>
          ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </Typography>
        <Grid container spacing={2}>
          {quickActions.map((action) => (
            <Grid item xs={12} sm={6} md={3} key={action.id}>
              <Card 
                sx={{ 
                  cursor: 'pointer',
                  '&:hover': {
                    boxShadow: 4,
                    transform: 'translateY(-2px)',
                    transition: 'all 0.2s'
                  }
                }}
                onClick={action.action}
              >
                <CardContent sx={{ textAlign: 'center', py: 3 }}>
                  <Avatar 
                    sx={{ 
                      bgcolor: action.color, 
                      width: 56, 
                      height: 56, 
                      mx: 'auto', 
                      mb: 2 
                    }}
                  >
                    {action.icon}
                  </Avatar>
                  <Typography variant="h6" gutterBottom>
                    {action.title}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {action.description}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Paper>

      <Grid container spacing={3}>
        {/* Stats Cards */}
        <Grid item xs={12} md={8}>
          <Grid container spacing={2} mb={3}>
            <Grid item xs={6} md={3}>
              <Card>
                <CardContent sx={{ textAlign: 'center' }}>
                  <Typography variant="h4" color="primary">
                    {stats.automationsRun}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–æ
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={6} md={3}>
              <Card>
                <CardContent sx={{ textAlign: 'center' }}>
                  <Typography variant="h4" color="success.main">
                    {stats.timeSaved}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –í—Ä–µ–º–µ–Ω–∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={6} md={3}>
              <Card>
                <CardContent sx={{ textAlign: 'center' }}>
                  <Typography variant="h4" color="info.main">
                    {stats.successRate}%
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={6} md={3}>
              <Card>
                <CardContent sx={{ textAlign: 'center' }}>
                  <Typography variant="h4" color="warning.main">
                    {stats.activeAutomations}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>

          {/* Recent Activity */}
          <Card>
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">
                  üìä –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                </Typography>
                <Button size="small" startIcon={<History />}>
                  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                </Button>
              </Box>
              <List>
                {recentActivity.map((activity, index) => (
                  <React.Fragment key={activity.id}>
                    <ListItem>
                      <ListItemIcon>
                        {getStatusIcon(activity.status)}
                      </ListItemIcon>
                      <ListItemText
                        primary={activity.name}
                        secondary={
                          <Box display="flex" alignItems="center" gap={1} mt={0.5}>
                            <Typography variant="caption">
                              {formatTimeAgo(activity.timestamp)}
                            </Typography>
                            <Chip
                              size="small"
                              label={activity.duration}
                              color={getStatusColor(activity.status) as any}
                              variant="outlined"
                            />
                          </Box>
                        }
                      />
                      <IconButton size="small">
                        <PlayArrow />
                      </IconButton>
                    </ListItem>
                    {index < recentActivity.length - 1 && <Divider />}
                  </React.Fragment>
                ))}
              </List>
            </CardContent>
          </Card>
        </Grid>

        {/* Sidebar */}
        <Grid item xs={12} md={4}>
          {/* Tips Card */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üí° –°–æ–≤–µ—Ç—ã
              </Typography>
              <Alert severity="info" sx={{ mb: 2 }}>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —à–∞–±–ª–æ–Ω "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
              </Alert>
              <Alert severity="success">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∏–ø—Ç–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–≥–æ–¥–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
              </Alert>
            </CardContent>
          </Card>

          {/* Performance Card */}
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              </Typography>
              <Box mb={2}>
                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography variant="body2">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</Typography>
                  <Typography variant="body2">{stats.successRate}%</Typography>
                </Box>
                <LinearProgress 
                  variant="determinate" 
                  value={stats.successRate} 
                  color="success"
                />
              </Box>
              <Box mb={2}>
                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography variant="body2">–°–∫–æ—Ä–æ—Å—Ç—å</Typography>
                  <Typography variant="body2">85%</Typography>
                </Box>
                <LinearProgress 
                  variant="determinate" 
                  value={85} 
                  color="info"
                />
              </Box>
              <Typography variant="caption" color="text.secondary">
                –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 1.2 –º–∏–Ω
              </Typography>
            </CardContent>
          </Card>

          {/* Quick Settings */}
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ‚öôÔ∏è –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Typography>
              <Button
                fullWidth
                startIcon={<Settings />}
                variant="outlined"
                sx={{ mb: 1 }}
              >
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
              </Button>
              <Button
                fullWidth
                startIcon={<Help />}
                variant="outlined"
              >
                –ü–æ–º–æ—â—å
              </Button>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
};