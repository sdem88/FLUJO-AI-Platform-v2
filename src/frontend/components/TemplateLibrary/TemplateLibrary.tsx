import React, { useState } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  CardActions,
  Typography,
  Button,
  Chip,
  TextField,
  InputAdornment,
  Tab,
  Tabs,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  OutlinedInput
} from '@mui/material';
import {
  Search,
  PlayArrow,
  Download,
  Star,
  Business,
  Code,
  TrendingUp,
  Article,
  Security,
  Analytics,
  Schedule,
  Language
} from '@mui/icons-material';

interface Template {
  id: string;
  title: string;
  description: string;
  category: string;
  difficulty: '–õ–µ–≥–∫–æ' | '–°—Ä–µ–¥–Ω–µ' | '–°–ª–æ–∂–Ω–æ';
  timeToSetup: string;
  uses: number;
  rating: number;
  icon: React.ReactNode;
  tags: string[];
  workflow: any;
  variables: { name: string; description: string; example: string }[];
}

const templates: Template[] = [
  {
    id: 'email-summary',
    title: '–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –ø–∏—Å–µ–º',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏ –∏–∑ –¥–ª–∏–Ω–Ω—ã—Ö email\'–æ–≤',
    category: 'business',
    difficulty: '–õ–µ–≥–∫–æ',
    timeToSetup: '2 –º–∏–Ω',
    uses: 1250,
    rating: 4.8,
    icon: <Business />,
    tags: ['email', '—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', '–æ—Ñ–∏—Å'],
    variables: [
      { name: 'email_text', description: '–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', example: '–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞...' }
    ],
    workflow: {
      // –ì–æ—Ç–æ–≤—ã–π workflow –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    }
  },
  {
    id: 'social-media-post',
    title: '–ü–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π',
    description: '–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–∑ –æ–¥–Ω–æ–π –∏–¥–µ–∏',
    category: 'content',
    difficulty: '–õ–µ–≥–∫–æ',
    timeToSetup: '1 –º–∏–Ω',
    uses: 2100,
    rating: 4.9,
    icon: <Article />,
    tags: ['—Å–æ—Ü—Å–µ—Ç–∏', '–∫–æ–Ω—Ç–µ–Ω—Ç', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥'],
    variables: [
      { name: 'topic', description: '–¢–µ–º–∞ –ø–æ—Å—Ç–∞', example: '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏' },
      { name: 'tone', description: '–¢–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è', example: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π' }
    ],
    workflow: {}
  },
  {
    id: 'competitor-analysis',
    title: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
    description: '–ò—Å—Å–ª–µ–¥—É–µ—Ç —Å–∞–π—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç',
    category: 'business',
    difficulty: '–°—Ä–µ–¥–Ω–µ',
    timeToSetup: '5 –º–∏–Ω',
    uses: 890,
    rating: 4.7,
    icon: <Analytics />,
    tags: ['–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', '–∞–Ω–∞–ª–∏–∑', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'],
    variables: [
      { name: 'competitor_urls', description: '–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', example: 'https://competitor.com' },
      { name: 'analysis_focus', description: '–ù–∞ —á–µ–º —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑', example: '–¶–µ–Ω—ã, –ø—Ä–æ–¥—É–∫—Ç—ã, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥' }
    ],
    workflow: {}
  },
  {
    id: 'code-review',
    title: '–†–µ–≤—å—é –∫–æ–¥–∞',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è',
    category: 'development',
    difficulty: '–°—Ä–µ–¥–Ω–µ',
    timeToSetup: '3 –º–∏–Ω',
    uses: 1750,
    rating: 4.6,
    icon: <Code />,
    tags: ['–∫–æ–¥', '—Ä–µ–≤—å—é', '–∫–∞—á–µ—Å—Ç–≤–æ'],
    variables: [
      { name: 'code_language', description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', example: 'JavaScript, Python, etc.' },
      { name: 'code_snippet', description: '–ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', example: 'function example() {...}' }
    ],
    workflow: {}
  },
  {
    id: 'crypto-alert',
    title: '–ö—Ä–∏–ø—Ç–æ –∞–ª–µ—Ä—Ç—ã',
    description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
    category: 'finance',
    difficulty: '–°—Ä–µ–¥–Ω–µ',
    timeToSetup: '4 –º–∏–Ω',
    uses: 650,
    rating: 4.5,
    icon: <TrendingUp />,
    tags: ['–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '—Ü–µ–Ω—ã', '–∞–ª–µ—Ä—Ç—ã'],
    variables: [
      { name: 'cryptocurrencies', description: '–°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', example: 'BTC, ETH, USDT' },
      { name: 'price_threshold', description: '–ü–æ—Ä–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞', example: '50000 USD' }
    ],
    workflow: {}
  },
  {
    id: 'meeting-notes',
    title: '–ö–æ–Ω—Å–ø–µ–∫—Ç –≤—Å—Ç—Ä–µ—á',
    description: '–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏',
    category: 'business',
    difficulty: '–õ–µ–≥–∫–æ',
    timeToSetup: '2 –º–∏–Ω',
    uses: 980,
    rating: 4.8,
    icon: <Schedule />,
    tags: ['–≤—Å—Ç—Ä–µ—á–∏', '–∑–∞–º–µ—Ç–∫–∏', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'],
    variables: [
      { name: 'meeting_transcript', description: '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å—Ç—Ä–µ—á–∏', example: '–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏...' },
      { name: 'focus_areas', description: '–ö–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏', example: '–†–µ—à–µ–Ω–∏—è, –¥–µ–π—Å—Ç–≤–∏—è, –¥–µ–¥–ª–∞–π–Ω—ã' }
    ],
    workflow: {}
  }
];

const categories = {
  all: { label: '–í—Å–µ', icon: <Star /> },
  business: { label: '–ë–∏–∑–Ω–µ—Å', icon: <Business /> },
  content: { label: '–ö–æ–Ω—Ç–µ–Ω—Ç', icon: <Article /> },
  development: { label: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', icon: <Code /> },
  finance: { label: '–§–∏–Ω–∞–Ω—Å—ã', icon: <TrendingUp /> },
  security: { label: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: <Security /> }
};

export const TemplateLibrary: React.FC = () => {
  const [activeCategory, setActiveCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);
  const [setupDialogOpen, setSetupDialogOpen] = useState(false);
  const [templateVariables, setTemplateVariables] = useState<Record<string, string>>({});

  const filteredTemplates = templates.filter(template => {
    const matchesCategory = activeCategory === 'all' || template.category === activeCategory;
    const matchesSearch = template.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
    return matchesCategory && matchesSearch;
  });

  const handleUseTemplate = (template: Template) => {
    setSelectedTemplate(template);
    setTemplateVariables({});
    setSetupDialogOpen(true);
  };

  const handleSetupTemplate = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è workflow –∏–∑ —à–∞–±–ª–æ–Ω–∞
    console.log('Creating workflow from template:', selectedTemplate?.id, templateVariables);
    setSetupDialogOpen(false);
    setSelectedTemplate(null);
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case '–õ–µ–≥–∫–æ': return 'success';
      case '–°—Ä–µ–¥–Ω–µ': return 'warning';
      case '–°–ª–æ–∂–Ω–æ': return 'error';
      default: return 'default';
    }
  };

  return (
    <Box>
      {/* Header */}
      <Box mb={4}>
        <Typography variant="h4" gutterBottom>
          üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        </Typography>
        <Typography variant="h6" color="text.secondary">
          –ì–æ—Ç–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ!
        </Typography>
      </Box>

      {/* Search */}
      <TextField
        fullWidth
        placeholder="–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤..."
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <Search />
            </InputAdornment>
          ),
        }}
        sx={{ mb: 3 }}
      />

      {/* Categories */}
      <Tabs
        value={activeCategory}
        onChange={(_, value) => setActiveCategory(value)}
        sx={{ mb: 3 }}
        variant="scrollable"
        scrollButtons="auto"
      >
        {Object.entries(categories).map(([key, category]) => (
          <Tab
            key={key}
            value={key}
            icon={category.icon}
            label={category.label}
            iconPosition="start"
          />
        ))}
      </Tabs>

      {/* Templates Grid */}
      <Grid container spacing={3}>
        {filteredTemplates.map((template) => (
          <Grid item xs={12} md={6} lg={4} key={template.id}>
            <Card 
              sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                '&:hover': {
                  boxShadow: 6,
                  transform: 'translateY(-2px)',
                  transition: 'all 0.2s'
                }
              }}
            >
              <CardContent sx={{ flex: 1 }}>
                <Box display="flex" alignItems="center" gap={1} mb={2}>
                  {template.icon}
                  <Typography variant="h6" component="h3">
                    {template.title}
                  </Typography>
                </Box>
                
                <Typography 
                  variant="body2" 
                  color="text.secondary" 
                  paragraph
                  sx={{ minHeight: '40px' }}
                >
                  {template.description}
                </Typography>

                <Box display="flex" flexWrap="wrap" gap={1} mb={2}>
                  <Chip 
                    size="small" 
                    label={template.difficulty}
                    color={getDifficultyColor(template.difficulty) as any}
                  />
                  <Chip 
                    size="small" 
                    label={template.timeToSetup}
                    variant="outlined"
                  />
                  <Chip 
                    size="small" 
                    label={`‚≠ê ${template.rating}`}
                    variant="outlined"
                  />
                </Box>

                <Box display="flex" flexWrap="wrap" gap={0.5}>
                  {template.tags.slice(0, 3).map((tag) => (
                    <Chip 
                      key={tag}
                      size="small"
                      label={tag}
                      variant="outlined"
                      sx={{ fontSize: '0.7rem' }}
                    />
                  ))}
                </Box>

                <Typography 
                  variant="caption" 
                  color="text.secondary" 
                  display="block" 
                  mt={1}
                >
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {template.uses.toLocaleString()} —Ä–∞–∑
                </Typography>
              </CardContent>

              <CardActions>
                <Button
                  variant="contained"
                  startIcon={<PlayArrow />}
                  onClick={() => handleUseTemplate(template)}
                  fullWidth
                >
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                </Button>
              </CardActions>
            </Card>
          </Grid>
        ))}
      </Grid>

      {filteredTemplates.length === 0 && (
        <Box textAlign="center" py={8}>
          <Typography variant="h6" color="text.secondary">
            –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </Typography>
          <Typography variant="body2" color="text.secondary">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </Typography>
        </Box>
      )}

      {/* Setup Dialog */}
      <Dialog 
        open={setupDialogOpen} 
        onClose={() => setSetupDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞: {selectedTemplate?.title}
        </DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" paragraph>
            {selectedTemplate?.description}
          </Typography>
          
          <Alert severity="info" sx={{ mb: 3 }}>
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç {selectedTemplate?.timeToSetup}
          </Alert>

          {selectedTemplate?.variables.map((variable, index) => (
            <FormControl fullWidth margin="normal" key={variable.name}>
              <InputLabel>{variable.description}</InputLabel>
              <OutlinedInput
                label={variable.description}
                placeholder={variable.example}
                value={templateVariables[variable.name] || ''}
                onChange={(e) => setTemplateVariables(prev => ({
                  ...prev,
                  [variable.name]: e.target.value
                }))}
                multiline={variable.name.includes('text') || variable.name.includes('snippet')}
                rows={variable.name.includes('text') || variable.name.includes('snippet') ? 4 : 1}
              />
            </FormControl>
          ))}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setSetupDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            variant="contained"
            onClick={handleSetupTemplate}
            disabled={selectedTemplate?.variables.some(v => !templateVariables[v.name])}
          >
            –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};